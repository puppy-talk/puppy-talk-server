import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0' apply false
    id 'io.spring.dependency-management' version '1.1.6' apply false
    id 'org.sonarqube' version '4.4.1.3373' apply false
}

group = 'com.puppy.talk'
version = '1.0-SNAPSHOT'

ext {
    // Spring Framework
    springBootVersion = '3.4.0'
    springCloudVersion = '2023.0.0'
    springFrameworkVersion = '6.1.0'
    
    // Database & Connection Pool
    hikariVersion = '5.1.0'
    mysqlVersion = '8.0.33'
    h2Version = '2.2.224'
    
    // Testing
    testcontainersVersion = '1.19.0'
    junitVersion = '5.10.0'
    assertjVersion = '3.24.2'
    mockitoVersion = '5.7.0'
    
    // External Libraries
    springDocVersion = '2.3.0'
    firebaseAdminVersion = '9.2.0'
    jacksonVersion = '2.16.0'
    lombokVersion = '1.18.30'
    
    // Logging
    slf4jVersion = '2.0.9'
    logbackVersion = '1.4.14'
    
    // Security & Validation
    bcryptVersion = '0.10.2'
    validationVersion = '3.0.2.Final'
    
    // Monitoring & Metrics
    micrometerVersion = '1.12.0'
    prometheusVersion = '1.12.0'
    
    // Utilities
    commonsLang3Version = '3.14.0'
    guavaVersion = '32.1.3-jre'
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    group = rootProject.group
    version = rootProject.version

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    // 공통 컴파일 옵션
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs += [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
        ]
    }

    // 공통 테스트 설정
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
        
        // 테스트 실행 시 로그 레벨 설정
        systemProperty 'logging.level.com.puppy.talk', 'DEBUG'
        systemProperty 'logging.level.org.springframework', 'WARN'
        
        // 테스트 실행 시간 제한
        timeout = Duration.ofMinutes(5)
        
        // 테스트 실패 시 상세 정보 출력
        failFast = false
    }

    // JaCoCo 설정
    jacoco {
        toolVersion = '0.8.11'
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
    }

    // SonarQube 설정
    sonarqube {
        properties {
            property 'sonar.projectKey', 'puppy-talk-server'
            property 'sonar.projectName', 'Puppy Talk Server'
            property 'sonar.projectVersion', version
            property 'sonar.sources', 'src/main/java'
            property 'sonar.tests', 'src/test/java'
            property 'sonar.java.binaries', 'build/classes'
            property 'sonar.java.test.binaries', 'build/test-results'
            property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        }
    }

    // 의존성 관리 - 실무 표준 패턴
    dependencyManagement {
        imports {
            // Spring Boot BOM - 핵심
            mavenBom SpringBootPlugin.BOM_COORDINATES
            
            // Spring Cloud BOM
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            
            // Micrometer BOM
            mavenBom "io.micrometer:micrometer-bom:${micrometerVersion}"
        }
        
        // 공통 의존성 버전 관리
        dependencies {
            // Spring Framework Core
            dependency "org.springframework:spring-context:${springFrameworkVersion}"
            dependency "org.springframework:spring-tx:${springFrameworkVersion}"
            dependency "org.springframework:spring-jdbc:${springFrameworkVersion}"
            dependency "org.springframework:spring-web:${springFrameworkVersion}"
            dependency "org.springframework:spring-webflux:${springFrameworkVersion}"
            dependency "org.springframework:spring-messaging:${springFrameworkVersion}"
            dependency "org.springframework:spring-aop:${springFrameworkVersion}"
            
            // Spring Boot Starters
            dependency "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
            dependency "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
            dependency "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
            dependency "org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}"
            dependency "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
            dependency "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
            dependency "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"
            
            // Database & Connection Pool
            dependency "com.zaxxer:HikariCP:${hikariVersion}"
            dependency "org.mariadb.jdbc:mariadb-java-client:3.3.2"
            dependency "com.h2database:h2:${h2Version}"
            
            // External Libraries
            dependency "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
            dependency "com.google.firebase:firebase-admin:${firebaseAdminVersion}"
            dependency "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            dependency "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
            dependency "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
            
            // Logging
            dependency "org.slf4j:slf4j-api:${slf4jVersion}"
            dependency "ch.qos.logback:logback-classic:${logbackVersion}"
            
            // Testing
            dependency "org.junit.jupiter:junit-jupiter:${junitVersion}"
            dependency "org.assertj:assertj-core:${assertjVersion}"
            
            // Monitoring & Metrics
            dependency "io.micrometer:micrometer-core:${micrometerVersion}"
            dependency "io.micrometer:micrometer-registry-prometheus:${prometheusVersion}"
            
            // Utilities
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "org.apache.commons:commons-lang3:${commonsLang3Version}"
            dependency "com.google.guava:guava:${guavaVersion}"
        }
    }

    // 공통 의존성 (모든 모듈에 적용)
    dependencies {
        // Lombok - 개발 편의성
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        
        // Logging
        implementation 'org.slf4j:slf4j-api'
        
        // Testing
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.assertj:assertj-core'
    }

    // 공통 태스크 설정
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        // 테스트 실행 시 메모리 설정
        minHeapSize = '256m'
        maxHeapSize = '1g'
        
        // 테스트 실행 시 시스템 프로퍼티 설정
        systemProperty 'file.encoding', 'UTF-8'
        systemProperty 'user.language', 'ko'
        systemProperty 'user.country', 'KR'
    }

    // 빌드 시 메타데이터 생성
    jar {
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Puppy Talk Team',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version')
            )
        }
    }
}

// 프로젝트 전체 설정
configurations.all {
    // 의존성 해결 전략
    resolutionStrategy {
        // 강제 버전 설정 (충돌 방지)
        force "org.springframework:spring-core:${springFrameworkVersion}"
        force "org.springframework:spring-beans:${springFrameworkVersion}"
        force "org.springframework:spring-context:${springFrameworkVersion}"
        
        // 캐시 설정
        cacheDynamicVersionsFor 10, 'minutes'
        cacheChangingModulesFor 0, 'seconds'
    }
}

// 전체 프로젝트 태스크
task cleanAll(type: Delete) {
    delete rootProject.buildDir
    delete subprojects*.buildDir
}

task buildAll {
    dependsOn subprojects*.build
    group = 'build'
    description = '모든 모듈 빌드'
}

task testAll {
    dependsOn subprojects*.test
    group = 'verification'
    description = '모든 모듈 테스트 실행'
}

task jacocoAll {
    dependsOn subprojects*.jacocoTestReport
    group = 'verification'
    description = '전체 코드 커버리지 리포트 생성'
}

// 빌드 성공/실패 알림
gradle.buildFinished { result ->
    if (result.failure) {
        println "❌ 빌드 실패: ${result.failure.message}"
    } else {
        println "✅ 빌드 성공: ${rootProject.name} ${rootProject.version}"
    }
}

# Gradle Version Catalog for Puppy Talk Server
# This file centralizes all dependency versions and coordinates for consistent management
# Naming Convention: libs.{category}.{library} or libs.{library} for single dependencies

[versions]
# == Spring Ecosystem ==
spring-boot = "3.4.0"
spring-cloud = "2023.0.0"  
spring-framework = "6.1.0"
spring-security = "6.1.5"
spring-dependency-management = "1.1.6"

# == Database & Persistence ==
hikari = "5.1.0"
mysql = "8.0.33"
mariadb = "3.3.2"
h2 = "2.2.224"
liquibase = "4.24.0"

# == Security & Authentication ==
bcrypt = "0.10.2"
jjwt = "0.12.3"

# == JSON & Serialization ==
jackson = "2.16.0"

# == External Services ==
firebase-admin = "9.2.0"
springdoc-openapi = "2.3.0"

# == Testing Framework ==
junit = "5.10.0"
assertj = "3.24.2"
mockito = "5.7.0"
testcontainers = "1.19.0"

# == Monitoring & Observability ==
micrometer = "1.12.0"
prometheus = "1.12.0"

# == Logging ==
slf4j = "2.0.9"
logback = "1.4.14"

# == Utilities ==
lombok = "1.18.30"
commons-lang3 = "3.14.0"
guava = "32.1.3-jre"
validation = "3.0.2.Final"

# == Build & Quality Tools ==
jacoco = "0.8.11"
sonarqube = "4.4.1.3373"

[libraries]
# == Spring Boot Starters ==
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "spring-boot" }
spring-boot-starter-websocket = { module = "org.springframework.boot:spring-boot-starter-websocket", version.ref = "spring-boot" }
spring-boot-starter-jdbc = { module = "org.springframework.boot:spring-boot-starter-jdbc", version.ref = "spring-boot" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "spring-boot" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
spring-boot-autoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "spring-boot" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }

# == Spring Framework Core ==
spring-context = { module = "org.springframework:spring-context", version.ref = "spring-framework" }
spring-context-support = { module = "org.springframework:spring-context-support", version.ref = "spring-framework" }
spring-tx = { module = "org.springframework:spring-tx", version.ref = "spring-framework" }
spring-jdbc = { module = "org.springframework:spring-jdbc", version.ref = "spring-framework" }
spring-web = { module = "org.springframework:spring-web", version.ref = "spring-framework" }
spring-webflux = { module = "org.springframework:spring-webflux", version.ref = "spring-framework" }
spring-messaging = { module = "org.springframework:spring-messaging", version.ref = "spring-framework" }
spring-websocket = { module = "org.springframework:spring-websocket", version.ref = "spring-framework" }
spring-aop = { module = "org.springframework:spring-aop", version.ref = "spring-framework" }

# == Security ==
spring-security-crypto = { module = "org.springframework.security:spring-security-crypto", version.ref = "spring-security" }
bcrypt = { module = "at.favre.lib:bcrypt", version.ref = "bcrypt" }
jjwt-api = { module = "io.jsonwebtoken:jjwt-api", version.ref = "jjwt" }
jjwt-impl = { module = "io.jsonwebtoken:jjwt-impl", version.ref = "jjwt" }
jjwt-jackson = { module = "io.jsonwebtoken:jjwt-jackson", version.ref = "jjwt" }

# == Database & Connection Pool ==
hikari = { module = "com.zaxxer:HikariCP", version.ref = "hikari" }
mysql-connector = { module = "mysql:mysql-connector-java", version.ref = "mysql" }
mariadb-client = { module = "org.mariadb.jdbc:mariadb-java-client", version.ref = "mariadb" }
h2 = { module = "com.h2database:h2", version.ref = "h2" }
liquibase-core = { module = "org.liquibase:liquibase-core", version.ref = "liquibase" }

# == JSON & Serialization ==
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-datatype-jdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8", version.ref = "jackson" }

# == External Services ==
firebase-admin = { module = "com.google.firebase:firebase-admin", version.ref = "firebase-admin" }
springdoc-openapi = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc-openapi" }

# == Testing Framework ==
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
assertj-core = { module = "org.assertj:assertj-core", version.ref = "assertj" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
testcontainers-core = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-mysql = { module = "org.testcontainers:mysql", version.ref = "testcontainers" }

# == Monitoring & Observability ==
micrometer-core = { module = "io.micrometer:micrometer-core", version.ref = "micrometer" }
micrometer-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "prometheus" }

# == Logging ==
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# == Utilities ==
lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }
commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "commons-lang3" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }

[bundles]
# == Spring Framework Bundles ==
spring-core = ["spring-context", "spring-tx"]
spring-web-stack = ["spring-web", "spring-messaging"]
spring-data-access = ["spring-jdbc", "spring-tx"]

# == Security Bundle ==
jwt-auth = ["jjwt-api", "jjwt-impl", "jjwt-jackson"]
security-crypto = ["spring-security-crypto", "bcrypt"]

# == JSON Processing Bundle ==
jackson-core = ["jackson-databind", "jackson-datatype-jsr310", "jackson-datatype-jdk8"]

# == Testing Bundles ==
testing-basic = ["junit-jupiter", "assertj-core", "spring-boot-starter-test"]
testing-extended = ["junit-jupiter", "assertj-core", "mockito-core", "spring-boot-starter-test"]
testing-integration = ["junit-jupiter", "assertj-core", "testcontainers-core", "testcontainers-junit"]
testing-database = ["junit-jupiter", "assertj-core", "testcontainers-core", "testcontainers-junit", "testcontainers-mysql", "h2"]

# == Monitoring Bundle ==
monitoring-stack = ["micrometer-core", "micrometer-prometheus"]

# == Development Tools Bundle ==
dev-tools = ["lombok"]

[plugins]
# == Build Plugins ==
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dependency-management" }

# == Quality & Analysis Plugins ==
sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }

# == Note: Plugin versions are managed centrally here ==
# Use: alias(libs.plugins.spring.boot) in build.gradle files
# Use: alias(libs.plugins.spring.dependency.management) in build.gradle files
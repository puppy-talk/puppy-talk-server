version: '3.8'

# 개발자를 위한 Docker Compose 설정
# MySQL과 Redis만 컨테이너로 실행하고, 애플리케이션은 로컬에서 실행

services:
  # MySQL 데이터베이스 (개발용)
  mysql:
    container_name: puppy-talk-mysql-dev
    image: mysql:8.0.36
    ports:
      - "3306:3306"
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: puppy_talk_db
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_ROOT_HOST: '%'
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-time-zone=+09:00
      - --sql-mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
      - --max_connections=200
      - --innodb-buffer-pool-size=128M
      - --log-bin-trust-function-creators=1
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./docker-mysql-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./schema/init:/docker-entrypoint-initdb.d/schema:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "--silent"]
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - puppy-talk-dev-network

  # Redis (개발용 - 캐싱 및 세션 저장용)
  redis:
    container_name: puppy-talk-redis-dev
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    environment:
      TZ: Asia/Seoul
    command: redis-server --appendonly no --maxmemory 64mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - puppy-talk-dev-network

  # phpMyAdmin (데이터베이스 관리 도구)
  phpmyadmin:
    container_name: puppy-talk-phpmyadmin
    image: phpmyadmin:5.2-apache
    ports:
      - "8090:80"
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_USER: ${MYSQL_USER:-puppy_user}
      PMA_PASSWORD: ${MYSQL_PASSWORD:-puppy_pass}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-1234}
      PMA_ARBITRARY: 1
      UPLOAD_LIMIT: 1G
      TZ: Asia/Seoul
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - puppy-talk-dev-network

  # Redis Commander (Redis 관리 도구)
  redis-commander:
    container_name: puppy-talk-redis-commander
    image: rediscommander/redis-commander:latest
    ports:
      - "8091:8081"
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
      TZ: Asia/Seoul
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - puppy-talk-dev-network

volumes:
  mysql_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  puppy-talk-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# 개발 환경에서 애플리케이션 실행 방법:
# 1. 이 파일로 인프라 서비스 시작: docker-compose -f docker-compose.dev.yml up -d
# 2. 로컬에서 애플리케이션 실행: ./gradlew application-api:bootRun
# 
# 개발용 하드코딩된 설정:
# - MySQL: root/1234, localhost:3306, DB: puppy_talk_db
# - Redis: localhost:6379
# - 애플리케이션은 application.yml의 local 프로필을 자동으로 사용
#
# 관리 도구 접근:
# - phpMyAdmin: http://localhost:8090
# - Redis Commander: http://localhost:8091 (admin/admin123)
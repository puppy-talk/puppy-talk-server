version: '3.8'

# 개발자 전용 Docker Compose 설정 (Enhanced)
# 개발 생산성을 위한 모든 인프라스트럭처와 개발 도구 제공
# 애플리케이션은 로컬에서 실행하고 인프라만 컨테이너로 실행

services:
  # MySQL 8.0 데이터베이스 (개발용)
  mysql:
    container_name: puppy-talk-mysql-dev
    image: mysql:8.0.36
    ports:
      - "3306:3306"
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: puppy_talk_db
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-1234}
      MYSQL_ROOT_HOST: '%'
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      TZ: Asia/Seoul
      # 개발용 성능 최적화 설정
      MYSQL_INNODB_BUFFER_POOL_SIZE: 256M
      MYSQL_INNODB_LOG_FILE_SIZE: 64M
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-time-zone=+09:00
      - --sql-mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
      - --max_connections=500
      - --innodb-buffer-pool-size=256M
      - --innodb-log-file-size=64M
      - --log-bin-trust-function-creators=1
      - --slow-query-log=1
      - --slow-query-log-file=/var/log/mysql/slow.log
      - --long_query_time=2
      - --general-log=1
      - --general-log-file=/var/log/mysql/general.log
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - mysql_dev_logs:/var/log/mysql
      - ./docker-mysql-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./schema/init:/docker-entrypoint-initdb.d/schema:ro
      - ./dev-tools/mysql/conf.d:/etc/mysql/conf.d:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "--silent"]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=database"
      - "dev.role=primary"

  # Redis 7.2 (캐싱 및 세션 저장용)
  redis:
    container_name: puppy-talk-redis-dev
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    environment:
      TZ: Asia/Seoul
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev123}
    command: >
      redis-server
      --appendonly no
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save ""
      --loglevel notice
      --logfile /var/log/redis/redis.log
    volumes:
      - redis_dev_data:/data
      - redis_dev_logs:/var/log/redis
      - ./dev-tools/redis/redis.conf:/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=cache"
      - "dev.role=primary"

  # PostgreSQL (AI 서비스 테스트용 대안 DB)
  postgres:
    container_name: puppy-talk-postgres-dev
    image: postgres:16.1-alpine
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_DB: puppy_talk_test_db
      POSTGRES_USER: ${POSTGRES_USER:-puppy_dev}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev123}
      TZ: Asia/Seoul
      PGTZ: Asia/Seoul
    command:
      - postgres
      - -c
      - log_statement=all
      - -c
      - log_destination=stderr
      - -c
      - logging_collector=on
      - -c
      - log_directory=/var/log/postgresql
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - postgres_dev_logs:/var/log/postgresql
      - ./dev-tools/postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-puppy_dev} -d puppy_talk_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=database"
      - "dev.role=alternative"

  # Elasticsearch (로그 분석 및 검색용)
  elasticsearch:
    container_name: puppy-talk-elasticsearch-dev
    image: elasticsearch:8.11.1
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: -Xms256m -Xmx512m
      TZ: Asia/Seoul
    volumes:
      - elasticsearch_dev_data:/usr/share/elasticsearch/data
      - elasticsearch_dev_logs:/usr/share/elasticsearch/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=search"
      - "dev.role=optional"

  # RabbitMQ (메시지 큐 시스템)
  rabbitmq:
    container_name: puppy-talk-rabbitmq-dev
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-puppy_dev}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-dev123}
      TZ: Asia/Seoul
    volumes:
      - rabbitmq_dev_data:/var/lib/rabbitmq
      - rabbitmq_dev_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=messaging"
      - "dev.role=optional"

  # Prometheus (메트릭 수집)
  prometheus:
    container_name: puppy-talk-prometheus-dev
    image: prom/prometheus:v2.48.1
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: Asia/Seoul
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_dev_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=monitoring"
      - "dev.role=metrics"

  # Grafana (메트릭 시각화)
  grafana:
    container_name: puppy-talk-grafana-dev
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-dev123}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
      TZ: Asia/Seoul
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=monitoring"
      - "dev.role=visualization"

  # Jaeger (분산 트레이싱)
  jaeger:
    container_name: puppy-talk-jaeger-dev
    image: jaegertracing/all-in-one:1.51
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
      - "14268:14268" # HTTP
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      TZ: Asia/Seoul
    volumes:
      - jaeger_dev_data:/tmp
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=monitoring"
      - "dev.role=tracing"

  # ====== 관리 및 개발 도구 ======

  # phpMyAdmin (MySQL 관리)
  phpmyadmin:
    container_name: puppy-talk-phpmyadmin
    image: phpmyadmin:5.2-apache
    ports:
      - "8090:80"
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD:-1234}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-1234}
      PMA_ARBITRARY: 1
      UPLOAD_LIMIT: 1G
      MEMORY_LIMIT: 512M
      TZ: Asia/Seoul
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=admin"
      - "dev.tool=database"

  # pgAdmin (PostgreSQL 관리)
  pgadmin:
    container_name: puppy-talk-pgadmin
    image: dpage/pgadmin4:8.1
    ports:
      - "8092:80"
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-dev@puppytalk.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-dev123}
      TZ: Asia/Seoul
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=admin"
      - "dev.tool=database"

  # Redis Commander (Redis 관리)
  redis-commander:
    container_name: puppy-talk-redis-commander
    image: rediscommander/redis-commander:latest
    ports:
      - "8091:8081"
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-dev123}
      TZ: Asia/Seoul
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=admin"
      - "dev.tool=cache"

  # Mailhog (이메일 테스트용)
  mailhog:
    container_name: puppy-talk-mailhog-dev
    image: mailhog/mailhog:v1.0.1
    ports:
      - "1025:1025"   # SMTP port
      - "8025:8025"   # Web UI
    restart: unless-stopped
    environment:
      TZ: Asia/Seoul
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=testing"
      - "dev.tool=email"

  # Wiremock (API 모킹 서비스)
  wiremock:
    container_name: puppy-talk-wiremock-dev
    image: wiremock/wiremock:3.3.1
    ports:
      - "8080:8080"   # Main port (외부 API 모킹용)
    restart: unless-stopped
    environment:
      TZ: Asia/Seoul
    command: --global-response-templating --verbose
    volumes:
      - ./dev-tools/wiremock/mappings:/home/wiremock/mappings:ro
      - ./dev-tools/wiremock/__files:/home/wiremock/__files:ro
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=testing"
      - "dev.tool=mocking"

  # LocalStack (AWS 로컬 개발용)
  localstack:
    container_name: puppy-talk-localstack-dev
    image: localstack/localstack:3.0
    ports:
      - "4566:4566"   # LocalStack endpoint
      - "4510-4559:4510-4559"  # External service port range
    restart: unless-stopped
    environment:
      SERVICES: s3,sns,sqs,dynamodb,lambda
      DEBUG: 1
      DATA_DIR: /tmp/localstack/data
      DOCKER_HOST: unix:///var/run/docker.sock
      TZ: Asia/Seoul
    volumes:
      - localstack_dev_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=testing"
      - "dev.tool=aws"

  # 개발 환경 상태 대시보드
  dev-dashboard:
    container_name: puppy-talk-dev-dashboard
    image: nginx:alpine
    ports:
      - "8000:80"
    restart: unless-stopped
    environment:
      TZ: Asia/Seoul
    volumes:
      - ./dev-tools/dashboard:/usr/share/nginx/html:ro
      - ./dev-tools/dashboard/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - puppy-talk-dev-network
    labels:
      - "dev.service=admin"
      - "dev.tool=dashboard"

volumes:
  # 데이터베이스 볼륨
  mysql_dev_data:
    driver: local
    labels:
      dev.volume.type: database
  postgres_dev_data:
    driver: local
    labels:
      dev.volume.type: database
  redis_dev_data:
    driver: local
    labels:
      dev.volume.type: cache

  # 로그 볼륨
  mysql_dev_logs:
    driver: local
    labels:
      dev.volume.type: logs
  redis_dev_logs:
    driver: local
    labels:
      dev.volume.type: logs
  postgres_dev_logs:
    driver: local
    labels:
      dev.volume.type: logs

  # 검색 및 메시징 볼륨
  elasticsearch_dev_data:
    driver: local
    labels:
      dev.volume.type: search
  elasticsearch_dev_logs:
    driver: local
    labels:
      dev.volume.type: logs
  rabbitmq_dev_data:
    driver: local
    labels:
      dev.volume.type: messaging
  rabbitmq_dev_logs:
    driver: local
    labels:
      dev.volume.type: logs

  # 모니터링 볼륨
  prometheus_dev_data:
    driver: local
    labels:
      dev.volume.type: monitoring
  grafana_dev_data:
    driver: local
    labels:
      dev.volume.type: monitoring
  jaeger_dev_data:
    driver: local
    labels:
      dev.volume.type: monitoring

  # 관리도구 볼륨
  pgadmin_dev_data:
    driver: local
    labels:
      dev.volume.type: admin

  # AWS 로컬 개발 볼륨
  localstack_dev_data:
    driver: local
    labels:
      dev.volume.type: testing

networks:
  puppy-talk-dev-network:
    driver: bridge
    name: puppy-talk-dev
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    labels:
      dev.network: primary

# 🚀 개발 환경 사용 가이드
#
# 1. 개발 환경 시작:
#    docker-compose -f docker-compose.dev.enhanced.yml up -d
#
# 2. 기본 서비스만 시작 (MySQL, Redis):
#    docker-compose -f docker-compose.dev.enhanced.yml up -d mysql redis
#
# 3. 전체 모니터링 스택 포함 시작:
#    docker-compose -f docker-compose.dev.enhanced.yml --profile monitoring up -d
#
# 4. 애플리케이션 로컬 실행:
#    ./gradlew application-api:bootRun
#
# 5. 환경 정리:
#    docker-compose -f docker-compose.dev.enhanced.yml down -v
#
# 🛠️ 접근 포트 및 URL:
#
# 📊 데이터베이스:
# - MySQL: localhost:3306 (root/1234)
# - PostgreSQL: localhost:5432 (puppy_dev/dev123)
# - Redis: localhost:6379
#
# 🔧 관리 도구:
# - 개발 대시보드: http://localhost:8000
# - phpMyAdmin: http://localhost:8090
# - pgAdmin: http://localhost:8092 (dev@puppytalk.local/dev123)
# - Redis Commander: http://localhost:8091 (admin/dev123)
#
# 📈 모니터링:
# - Prometheus: http://localhost:9090
# - Grafana: http://localhost:3000 (admin/dev123)
# - Jaeger: http://localhost:16686
# - Elasticsearch: http://localhost:9200
#
# 🧪 테스트 도구:
# - MailHog: http://localhost:8025
# - WireMock: http://localhost:8080
# - LocalStack: http://localhost:4566
# - RabbitMQ Management: http://localhost:15672 (puppy_dev/dev123)
#
# 💡 개발 팁:
# - 환경변수는 .env 파일 또는 시스템 환경변수로 설정
# - 각 서비스별 로그는 볼륨을 통해 영구 저장
# - 헬스체크를 통한 서비스 의존성 관리
# - 라벨을 통한 서비스 분류 및 관리